(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>d});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,'/* resetting */\nhtml,\nbody {\n  min-height: 100vh;\n  margin: 0;\n}\nul {\n  list-style: none;\n  margin: 0;\n}\n\n:root {\n  font-family: "Roboto Slab", serif;\n  --color-cyan-800: #155e75;\n  --color-cyan-500: #06b6d4;\n  --color-cyan-300: #67e8f9;\n  --color-stone-400: #a8a29e;\n  --color-stone-200: #e7e5e4;\n  --color-red-400: #f87171;\n  --color-lime-400: #a3e635;\n}\nbody button {\n  font: inherit;\n}\n\nheader {\n  grid-column: 1 / 3;\n  background-color: var(--color-cyan-800);\n  color: white;\n  padding-left: 30px;\n  display: grid;\n  align-items: center;\n}\nbody {\n  display: grid;\n  grid-template-rows: 100px 1fr;\n  grid-template-columns: 210px 1fr;\n}\n\nnav {\n  background-color: var(--color-stone-400);\n  padding-top: 140px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: end;\n  padding-right: 10px;\n  gap: 5px;\n  box-shadow: inset 0px 5px 5px rgba(0, 0, 0, 0.2);\n}\n\nnav ul,\nnav li {\n  display: contents;\n}\n\nnav form {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n}\n\nnav input {\n  width: 200px;\n  height: 30px;\n  box-sizing: border-box;\n  background-color: buttonface;\n  font: inherit;\n  border-radius: 8px;\n}\nnav button {\n  width: 200px;\n  height: 30px;\n  border-radius: 8px;\n}\n\nnav form button {\n  width: 100px;\n  background-color: var(--color-cyan-500);\n  border: none;\n  outline: none;\n}\nnav .all-projects {\n  margin-bottom: 20px;\n}\nmain {\n  grid-column: 2 / 3;\n  background-color: var(--color-stone-200);\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 50px;\n  padding: 50px;\n  box-shadow: inset 5px 5px 5px rgba(0, 0, 0, 0.2);\n}\n\nmain > button {\n  width: 200px;\n  height: 40px;\n  border-radius: 8px;\n  background-color: var(--color-cyan-500);\n}\n.new-todo {\n  height: 30px;\n  width: 100px;\n  font-size: 16px;\n}\n.todo-container {\n  display: grid;\n  grid-auto-flow: row;\n  grid-auto-rows: 50px;\n  grid-template-rows: repeat(auto-fit, 50px);\n  /* grid-template-columns: repeat(2, 1fr); */\n  column-gap: 30px;\n  row-gap: 10px;\n  justify-items: start;\n  width: 100%;\n}\n\n.card {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 12px;\n  width: 550px;\n  border: var(--color-cyan-500) solid 2px;\n}\n.card[data-priority="urgent"] {\n  border-color: var(--color-red-400);\n}\n.card[data-done="true"] {\n  border-color: var(--color-lime-400);\n}\n\n.card > div {\n  min-width: 150px;\n}\n.card > button {\n  width: 75px;\n  outline: none;\n  border: none;\n  border-radius: 5px;\n}\n\n.card button:nth-of-type(1) {\n  background-color: var(--color-cyan-500);\n}\n.card button:nth-of-type() {\n  background-color: var(--color-red-400);\n}\n.hidden {\n  display: none;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.4);\n\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #888;\n  height: 500px;\n  width: 500px;\n  border-radius: 10px;\n}\n\n.modal form {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-top: 75px;\n  gap: 15px;\n  padding-left: 20px;\n}\n.modal form > div {\n  display: flex;\n  margin-top: 5px;\n}\n\n.modal form label {\n  width: 150px;\n  font-size: 1.4rem;\n  color: var(black);\n}\n.modal form input {\n  font-size: 1.2rem;\n  border-radius: 5px;\n  width: 300px;\n}\n.modal form input[type="checkbox"] {\n  height: 23px;\n  width: 23px;\n}\n\n.modal select {\n  height: 25px;\n  font: inherit;\n}\n\n.modal form button {\n  width: 40%;\n  height: 40px;\n  border-radius: 10px;\n  background-color: var(--color-cyan-500);\n  margin: 5px auto;\n}\n\n.close {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,cAAc;AACd;;EAEE,iBAAiB;EACjB,SAAS;AACX;AACA;EACE,gBAAgB;EAChB,SAAS;AACX;;AAEA;EACE,iCAAiC;EACjC,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;EACzB,0BAA0B;EAC1B,0BAA0B;EAC1B,wBAAwB;EACxB,yBAAyB;AAC3B;AACA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,uCAAuC;EACvC,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,6BAA6B;EAC7B,gCAAgC;AAClC;;AAEA;EACE,wCAAwC;EACxC,kBAAkB;;EAElB,aAAa;EACb,sBAAsB;EACtB,gBAAgB;EAChB,mBAAmB;EACnB,QAAQ;EACR,gDAAgD;AAClD;;AAEA;;EAEE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,QAAQ;EACR,uBAAuB;AACzB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,sBAAsB;EACtB,4BAA4B;EAC5B,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,uCAAuC;EACvC,YAAY;EACZ,aAAa;AACf;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;EAClB,wCAAwC;;EAExC,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,gDAAgD;AAClD;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,uCAAuC;AACzC;AACA;EACE,YAAY;EACZ,YAAY;EACZ,eAAe;AACjB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,oBAAoB;EACpB,0CAA0C;EAC1C,2CAA2C;EAC3C,gBAAgB;EAChB,aAAa;EACb,oBAAoB;EACpB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,uCAAuC;AACzC;AACA;EACE,kCAAkC;AACpC;AACA;EACE,mCAAmC;AACrC;;AAEA;EACE,gBAAgB;AAClB;AACA;EACE,WAAW;EACX,aAAa;EACb,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,uCAAuC;AACzC;AACA;EACE,sCAAsC;AACxC;AACA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,eAAe;EACf,UAAU;EACV,WAAW;EACX,YAAY;EACZ,cAAc;EACd,oCAAoC;;EAEpC,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,aAAa;EACb,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,gBAAgB;EAChB,SAAS;EACT,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,iBAAiB;AACnB;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,YAAY;AACd;AACA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,UAAU;EACV,YAAY;EACZ,mBAAmB;EACnB,uCAAuC;EACvC,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,iBAAiB;AACnB;;AAEA;;EAEE,YAAY;EACZ,qBAAqB;EACrB,eAAe;AACjB",sourcesContent:['/* resetting */\nhtml,\nbody {\n  min-height: 100vh;\n  margin: 0;\n}\nul {\n  list-style: none;\n  margin: 0;\n}\n\n:root {\n  font-family: "Roboto Slab", serif;\n  --color-cyan-800: #155e75;\n  --color-cyan-500: #06b6d4;\n  --color-cyan-300: #67e8f9;\n  --color-stone-400: #a8a29e;\n  --color-stone-200: #e7e5e4;\n  --color-red-400: #f87171;\n  --color-lime-400: #a3e635;\n}\nbody button {\n  font: inherit;\n}\n\nheader {\n  grid-column: 1 / 3;\n  background-color: var(--color-cyan-800);\n  color: white;\n  padding-left: 30px;\n  display: grid;\n  align-items: center;\n}\nbody {\n  display: grid;\n  grid-template-rows: 100px 1fr;\n  grid-template-columns: 210px 1fr;\n}\n\nnav {\n  background-color: var(--color-stone-400);\n  padding-top: 140px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: end;\n  padding-right: 10px;\n  gap: 5px;\n  box-shadow: inset 0px 5px 5px rgba(0, 0, 0, 0.2);\n}\n\nnav ul,\nnav li {\n  display: contents;\n}\n\nnav form {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n}\n\nnav input {\n  width: 200px;\n  height: 30px;\n  box-sizing: border-box;\n  background-color: buttonface;\n  font: inherit;\n  border-radius: 8px;\n}\nnav button {\n  width: 200px;\n  height: 30px;\n  border-radius: 8px;\n}\n\nnav form button {\n  width: 100px;\n  background-color: var(--color-cyan-500);\n  border: none;\n  outline: none;\n}\nnav .all-projects {\n  margin-bottom: 20px;\n}\nmain {\n  grid-column: 2 / 3;\n  background-color: var(--color-stone-200);\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 50px;\n  padding: 50px;\n  box-shadow: inset 5px 5px 5px rgba(0, 0, 0, 0.2);\n}\n\nmain > button {\n  width: 200px;\n  height: 40px;\n  border-radius: 8px;\n  background-color: var(--color-cyan-500);\n}\n.new-todo {\n  height: 30px;\n  width: 100px;\n  font-size: 16px;\n}\n.todo-container {\n  display: grid;\n  grid-auto-flow: row;\n  grid-auto-rows: 50px;\n  grid-template-rows: repeat(auto-fit, 50px);\n  /* grid-template-columns: repeat(2, 1fr); */\n  column-gap: 30px;\n  row-gap: 10px;\n  justify-items: start;\n  width: 100%;\n}\n\n.card {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 12px;\n  width: 550px;\n  border: var(--color-cyan-500) solid 2px;\n}\n.card[data-priority="urgent"] {\n  border-color: var(--color-red-400);\n}\n.card[data-done="true"] {\n  border-color: var(--color-lime-400);\n}\n\n.card > div {\n  min-width: 150px;\n}\n.card > button {\n  width: 75px;\n  outline: none;\n  border: none;\n  border-radius: 5px;\n}\n\n.card button:nth-of-type(1) {\n  background-color: var(--color-cyan-500);\n}\n.card button:nth-of-type() {\n  background-color: var(--color-red-400);\n}\n.hidden {\n  display: none;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.4);\n\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #888;\n  height: 500px;\n  width: 500px;\n  border-radius: 10px;\n}\n\n.modal form {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-top: 75px;\n  gap: 15px;\n  padding-left: 20px;\n}\n.modal form > div {\n  display: flex;\n  margin-top: 5px;\n}\n\n.modal form label {\n  width: 150px;\n  font-size: 1.4rem;\n  color: var(black);\n}\n.modal form input {\n  font-size: 1.2rem;\n  border-radius: 5px;\n  width: 300px;\n}\n.modal form input[type="checkbox"] {\n  height: 23px;\n  width: 23px;\n}\n\n.modal select {\n  height: 25px;\n  font: inherit;\n}\n\n.modal form button {\n  width: 40%;\n  height: 40px;\n  border-radius: 10px;\n  background-color: var(--color-cyan-500);\n  margin: 5px auto;\n}\n\n.close {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n'],sourceRoot:""}]);const d=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],d=0;d<n.length;d++){var c=n[d],s=o.base?c[0]+o.base:c[0],l=a[s]||0,u="".concat(s," ").concat(l);a[s]=l+1;var A=t(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var m=r(p,o);o.byIndex=d,e.splice(d,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var d=t(a[i]);e[d].references--}for(var c=o(n,r),s=0;s<a.length;s++){var l=t(a[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n=[];function e({title:n,description:e,dueDate:t,priority:o,projectIndex:r,todoIndex:a,done:i=!1}){return{title:n,description:e,dueDate:t,priority:o,projectIndex:r,todoIndex:a,done:i}}function o(t){n.push(function(n,t){let o=[];return{projectName:n,projectIndex:t,todos:o,addTodo:function(n){const r=o.length;o.push(e({...n,projectIndex:t,todoIndex:r}))},removeTodo:function(n){delete o[n]},editTodo:function(n,t){o[n]=e(t)},getProjectTodos:function(){return o}}}(t,n.length))}function r(e,t){n[e].removeTodo(t)}function a(){const e={};n.forEach((n=>{e[n.projectName]=n.todos})),localStorage.setItem("projects",JSON.stringify(e))}const i=0===n.length;!localStorage.projects&&i&&o("default");var d={};function c(){return d}function s(n){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},s(n)}function l(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function u(n){l(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===s(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function A(n,e){l(2,arguments);var t=u(n),o=u(e),r=t.getTime()-o.getTime();return r<0?-1:r>0?1:r}function p(n,e){l(2,arguments);var t,o=u(n),r=u(e),a=A(o,r),i=Math.abs(function(n,e){l(2,arguments);var t=u(n),o=u(e);return 12*(t.getFullYear()-o.getFullYear())+(t.getMonth()-o.getMonth())}(o,r));if(i<1)t=0;else{1===o.getMonth()&&o.getDate()>27&&o.setDate(30),o.setMonth(o.getMonth()-a*i);var d=A(o,r)===-a;(function(n){l(1,arguments);var e=u(n);return function(n){l(1,arguments);var e=u(n);return e.setHours(23,59,59,999),e}(e).getTime()===function(n){l(1,arguments);var e=u(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}(e).getTime()})(u(n))&&1===i&&1===A(n,r)&&(d=!1),t=a*(i-Number(d))}return 0===t?0:t}var m={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}},f="trunc";var h={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function g(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const C={date:g({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:g({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:g({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var b={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var i=n.defaultWidth,d=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[d]||n.values[i]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const v={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function y(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,d=a[0],c=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],s=Array.isArray(c)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(d))return t}(c):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(d))return t}(c);return i=n.valueCallback?n.valueCallback(s):s,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(d.length)}}}var x,B={ordinalNumber:(x={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(x.matchPattern);if(!t)return null;var o=t[0],r=n.match(x.parsePattern);if(!r)return null;var a=x.valueCallback?x.valueCallback(r[0]):r[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(o.length)}}),era:y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const w={code:"en-US",formatDistance:function(n,e,t){var o,r=h[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:C,formatRelative:function(n,e,t,o){return b[n]},localize:v,match:B,options:{weekStartsOn:0,firstWeekContainsDate:1}};function k(n,e){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}function S(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var M=1440,j=2520,D=43200,Y=86400;function T(n,e,t){var o,r;l(2,arguments);var a=c(),i=null!==(o=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:a.locale)&&void 0!==o?o:w;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var d=A(n,e);if(isNaN(d))throw new RangeError("Invalid time value");var s,h,g=k(k({},t),{addSuffix:Boolean(null==t?void 0:t.addSuffix),comparison:d});d>0?(s=u(e),h=u(n)):(s=u(n),h=u(e));var C,b=function(n,e,t){l(2,arguments);var o,r=function(n,e){return l(2,arguments),u(n).getTime()-u(e).getTime()}(n,e)/1e3;return((o=null==t?void 0:t.roundingMethod)?m[o]:m[f])(r)}(h,s),E=(S(h)-S(s))/1e3,v=Math.round((b-E)/60);if(v<2)return null!=t&&t.includeSeconds?b<5?i.formatDistance("lessThanXSeconds",5,g):b<10?i.formatDistance("lessThanXSeconds",10,g):b<20?i.formatDistance("lessThanXSeconds",20,g):b<40?i.formatDistance("halfAMinute",0,g):b<60?i.formatDistance("lessThanXMinutes",1,g):i.formatDistance("xMinutes",1,g):0===v?i.formatDistance("lessThanXMinutes",1,g):i.formatDistance("xMinutes",v,g);if(v<45)return i.formatDistance("xMinutes",v,g);if(v<90)return i.formatDistance("aboutXHours",1,g);if(v<M){var y=Math.round(v/60);return i.formatDistance("aboutXHours",y,g)}if(v<j)return i.formatDistance("xDays",1,g);if(v<D){var x=Math.round(v/M);return i.formatDistance("xDays",x,g)}if(v<Y)return C=Math.round(v/D),i.formatDistance("aboutXMonths",C,g);if((C=p(h,s))<12){var B=Math.round(v/D);return i.formatDistance("xMonths",B,g)}var T=C%12,W=Math.floor(C/12);return T<3?i.formatDistance("aboutXYears",W,g):T<9?i.formatDistance("overXYears",W,g):i.formatDistance("almostXYears",W+1,g)}document.querySelector("#myModal");const W=document.querySelector(".new-todo"),I=document.querySelector(".todo-form");let P=-1;function q(n){P=n}function Z(n){const{projectIndex:e}=n.target.dataset,t=document.querySelectorAll(".card"),o=document.querySelectorAll(`.card[data-project-index="${e}"]`);t.forEach((n=>{n.classList.add("hidden")})),o.forEach((n=>{n.classList.remove("hidden")})),q(e)}function z(){document.querySelectorAll(".card").forEach((n=>{n.classList.remove("hidden")})),q(-1)}var N=t(379),L=t.n(N),X=t(795),F=t.n(X),O=t(569),J=t.n(O),R=t(565),H=t.n(R),U=t(216),Q=t.n(U),V=t(589),_=t.n(V),G=t(426),$={};function K(){!function(){const n=document.querySelector(".projects"),e=document.querySelector(".todo-container");n.innerHTML="",e.innerHTML=""}(),function(n,e,t,o){const r=document.querySelector(".todo-container");n.forEach((n=>{const t=document.createElement("div");t.classList.add("card"),t.dataset.priority=n.priority,t.dataset.projectIndex=n.projectIndex,t.dataset.todoIndex=n.todoIndex,t.dataset.description=n.description,t.dataset.done=n.done,t.dataset.dueDate=n.dueDate;const a=document.createElement("div");a.textContent=n.title;const i=document.createElement("div");console.log(n.dueDate),i.textContent=function(n,e){return l(1,arguments),T(n,Date.now(),e)}(new Date(n.dueDate),{addSuffix:!0});const d=document.createElement("button");d.classList.add("edit"),d.textContent="edit",d.addEventListener("click",(n=>{W.click(),function(n){const e=I.querySelectorAll("input"),t=I.querySelector("select");e[0].value=n.children[0].textContent,e[1].value=n.dataset.dueDate,e[2].value=n.dataset.description,console.log(e[3].checked,"here"),console.log(n.dataset.done),console.log(n.dataset.done),n.dataset.done&&console.log("sgwhkjsfhjklg"),e[3].checked=!("true"!==n.dataset.done),console.log(e[3].checked,"there"),t.value=n.dataset.priority,I.dataset.projectIndex=n.dataset.projectIndex,I.dataset.todoIndex=n.dataset.todoIndex}(n.target.parentNode)}));const c=document.createElement("button");c.classList.add("delete"),c.textContent="delete",c.addEventListener("click",(n=>{const{projectIndex:t,todoIndex:r}=n.target.parentNode.dataset;e(t,r),n.target.parentNode.remove(),o()})),t.appendChild(a),t.appendChild(i),t.appendChild(d),t.appendChild(c),r.appendChild(t)}))}(function(){const e=[];return n.forEach((n=>{n.todos.forEach((n=>{n&&e.push(n)}))})),e}(),r,0,a),function(n,e){const t=document.querySelector(".projects");n.forEach(((n,o)=>{const r=document.createElement("li"),a=document.createElement("button");a.classList.add("project"),a.textContent=n,a.dataset.projectIndex=o,a.addEventListener("click",e),r.appendChild(a),t.appendChild(r)}))}(n.map((n=>n.projectName)),Z),-1===P?z():Z({target:{dataset:{projectIndex:P}}}),a()}$.styleTagTransform=_(),$.setAttributes=H(),$.insert=J().bind(null,"head"),$.domAPI=F(),$.insertStyleElement=Q(),L()(G.Z,$),G.Z&&G.Z.locals&&G.Z.locals,document.querySelector(".all-projects").addEventListener("click",z);const nn=document.querySelector(".new-project"),en=document.querySelector(".project-form");nn.addEventListener("click",(()=>{en.classList.toggle("hidden")})),en.addEventListener("submit",(e=>{e.preventDefault(),o([...new FormData(e.target).entries()][0][1]),q(n.length-1),K(),en.reset(),en.classList.toggle("hidden")}));const tn=document.querySelector("#myModal"),on=document.querySelector(".new-todo"),rn=document.querySelector(".close"),an=document.querySelector(".todo-form");function dn(){an.reset(),delete an.dataset.projectIndex,delete an.dataset.todoIndex,tn.style.display="none"}on.onclick=()=>{tn.style.display="grid"},window.onclick=n=>{n.target===tn&&dn()},rn.onclick=()=>{dn()},an.addEventListener("submit",(e=>{e.preventDefault();const t=new FormData(e.target),o=Object.fromEntries(t.entries());o.done="on"===o.done,console.log(o);const r=e.target;if(r.dataset.projectIndex)console.log(r.dataset,o),a=r.dataset.projectIndex,i=r.dataset.todoIndex,d=o,n[a].editTodo(i,{projectIndex:a,todoIndex:i,...d});else{let e=P;e=-1===e?0:e,function(e,t){n[e].addTodo(t)}(e,o)}var a,i,d;K(),dn()})),window.addEventListener("load",(()=>{!function(){if(localStorage.projects&&i){const e=JSON.parse(localStorage.projects);Object.keys(e).forEach(((t,r)=>{o(t),e[t].forEach((e=>{e&&n[r].addTodo(e)}))}))}}(),K()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,